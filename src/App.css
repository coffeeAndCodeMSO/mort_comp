/*.App {
  text-align: center;
}

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  height: 80px;
}

.App-header {
  background-color: #222;
  height: 150px;
  padding: 20px;
  color: white;
}

.App-intro {
  font-size: large;
}

@keyframes App-logo-spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}*/

body {

}

.App {
  font-size: 14px;
  line-height: 1.42857143;

  max-width: 1000px;
  margin: auto;
  padding-left: 5px;
  padding-right: 5px;
  border: 1px solid red;

  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif
;
}

table {
  td th {
    border: 2px solid;
  }
}

.relatedSectionOfNumbers {
  border: 1px solid #ccc;
  padding: 5px;
  margin-left: 5px;
  margin-right: 5px;
  margin-bottom: 5px;
  border-radius: 4px;
  width: 400px;

  box-shadow: 0 1px 1px rgba(0,0,0,.075);

}

td {
  padding-right: 4px;
  border: 4px;
}

.column-heading {
  text-align: right;
  font-weight: bold;
  /*font-size: 13px;*/
}

.column-data {
  text-align: left;
  /*font-size: 10px;*/
  white-space: pre;
}

.minor-column-heading {
  text-align: right;
  color: #555;
  font-weight: 400;
  /*font-size: 10px;*/
}

.minor-data {
  color: #555;
  font-weight: 200;
  /*font-style: italic;*/
  /*font-size: 9px;*/
}

input, .column-data, .minor-data, .money-input, .money-display {
  color: #555;
  padding: 6px 6px;
  font-size: 14px;
  width: 80px;
  text-align: left;
}

input {
  border: 1px solid #ccc;
  border-radius: 4px;
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
}

.percentageInput {
  width: 60px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.sideBySideRow {
  border: 1px solid red;
  clear: both;
  overflow: auto;
}

.sideBySideColumn {
  display: inline-block;
}

.input-group, .display-group {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin-bottom: 5px;
}
.input-subgroup {
  display: inline;
}

.input-label, .display-label {
  text-align: right;
  font-weight: bold;
  margin-right: 10px;
}

.input-unit, .display-unit {
  margin-right: 3px;
}





/* TODO:
  - Refactor so input cells are distinct react object, InputCell with input cell and units and labeling (add classes for stylring)
  --> Create ResultCell class as well
  --> Create 'container elements' for columns/rows/groups of cells
  Right now, input styling is tied too closely to the table arrangement
  --> Goal: Built re-usable compenents that are easy to shuffle around to meet client interest, or to prototype different layouts

  Other ideas:
  - Display values to nearest dollar? Add commas.
  - 2 points past decimal on annual interest rates?
  - Think through overall layout/design. What info is essential?
  - Mobile approach? ==> What does this look like displayed as one column?
*/
